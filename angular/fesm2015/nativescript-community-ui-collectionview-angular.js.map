{"version":3,"file":"nativescript-community-ui-collectionview-angular.js","sources":["../../../../src/collectionview/angular/collectionview-comp.ts","../../../../src/collectionview/angular/index.ts"],"sourcesContent":["import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter,\n    Host,\n    Inject,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    OnDestroy,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ÉµisListLikeIterable as isListLikeIterable,\n} from '@angular/core';\nimport { KeyedTemplate, LayoutBase, ObservableArray, Trace, View } from '@nativescript/core';\nimport { CLog, CLogTypes, CollectionView, CollectionViewItemEventData, ListViewViewTypes } from '@nativescript-community/ui-collectionview';\n\nimport { getSingleViewRecursive, isKnownView, registerElement } from '@nativescript/angular';\n\nregisterElement('CollectionView', () => CollectionView);\n\nconst NG_VIEW = '_ngViewRef';\n\nexport class ItemContext {\n    constructor(\n        public $implicit?: any,\n        public item?: any,\n        public index?: number,\n        public even?: boolean,\n        public odd?: boolean\n    ) {}\n}\n\nexport interface SetupItemViewArgs {\n    view: EmbeddedViewRef<any>;\n    data: any;\n    index: number;\n    context: ItemContext;\n}\n\n@Component({\n    selector: 'CollectionView',\n    template: `\n        <DetachedContainer>\n            <Placeholder #loader></Placeholder>\n        </DetachedContainer>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionViewComponent implements DoCheck, OnDestroy, AfterContentInit {\n    public get nativeElement(): any {\n        return this._collectionView;\n    }\n    public get listView(): any {\n        return this._collectionView;\n    }\n\n    @ViewChild('loader', { read: ViewContainerRef, static: true }) public loader: ViewContainerRef;\n    @Output() public setupItemView = new EventEmitter<SetupItemViewArgs>();\n    @ContentChild(TemplateRef, { read: TemplateRef, static: true }) public itemTemplateQuery: TemplateRef<ItemContext>;\n\n    @Input()\n    public get itemTemplate() {\n        return this._itemTemplate;\n    }\n    public set itemTemplate(value: any) {\n        this._itemTemplate = value;\n        this._collectionView.refresh();\n    }\n    @Input()\n    public get items() {\n        return this._items;\n    }\n    public set items(value: any) {\n        this._items = value;\n        let needDiffer = true;\n        if (value instanceof ObservableArray) {\n            needDiffer = false;\n        }\n        if (needDiffer && !this._differ && isListLikeIterable(value)) {\n            this._differ = this._iterableDiffers.find(this._items).create((_index, item) => item);\n        }\n\n        this._collectionView.items = this._items;\n    }\n\n    private _collectionView: CollectionView;\n    private _items: any;\n    private _differ: IterableDiffer<KeyedTemplate>;\n    private _itemTemplate: TemplateRef<ItemContext>;\n    private _templateMap: Map<string, KeyedTemplate>;\n\n    constructor(@Inject(ElementRef) _elementRef: ElementRef, @Inject(IterableDiffers) private _iterableDiffers: IterableDiffers) {\n        this._collectionView = _elementRef.nativeElement;\n\n        this._collectionView.on(CollectionView.itemLoadingEvent, this.onItemLoading, this);\n        this._collectionView.itemViewLoader = this.itemViewLoader;\n    }\n\n    private itemViewLoader = (viewType) => {\n        switch (viewType) {\n            case ListViewViewTypes.ItemView:\n                if (this._itemTemplate && this.loader) {\n                    const nativeItem = this.loader.createEmbeddedView(this._itemTemplate, new ItemContext(), 0);\n                    const typedView = getItemViewRoot(nativeItem);\n                    typedView[NG_VIEW] = nativeItem;\n                    return typedView;\n                }\n                break;\n        }\n        return null;\n    };\n\n    public ngAfterContentInit() {\n        if (Trace.isEnabled()) {\n            CLog(CLogTypes.info, 'CollectionView.ngAfterContentInit()');\n        }\n        this.setItemTemplates();\n    }\n\n    public ngOnDestroy() {\n        this._collectionView.off(CollectionView.itemLoadingEvent, this.onItemLoading, this);\n    }\n\n    public ngDoCheck() {\n        if (Trace.isEnabled()) {\n            CLog(CLogTypes.info, 'ngDoCheck() - execute differ? ' + this._differ);\n        }\n        if (this._differ) {\n            if (Trace.isEnabled()) {\n                CLog(CLogTypes.info, 'ngDoCheck() - execute differ');\n            }\n            const changes = this._differ.diff(this._items);\n            if (changes) {\n                if (Trace.isEnabled()) {\n                    CLog(CLogTypes.info, 'ngDoCheck() - refresh');\n                }\n                this.refresh();\n            }\n        }\n    }\n\n    public registerTemplate(key: string, template: TemplateRef<ItemContext>) {\n        if (Trace.isEnabled()) {\n            CLog(CLogTypes.info, 'registerTemplate for key: ' + key);\n        }\n        if (!this._templateMap) {\n            this._templateMap = new Map<string, KeyedTemplate>();\n        }\n\n        const keyedTemplate = {\n            key,\n            createView: this.getItemTemplateViewFactory(template),\n        };\n\n        this._templateMap.set(key, keyedTemplate);\n    }\n\n    // @HostListener('itemLoadingInternal', ['$event'])\n    public onItemLoading(args: CollectionViewItemEventData) {\n        if (!args.view && !this.itemTemplate) {\n            return;\n        }\n        if (!this.items) return;\n        const index = args.index;\n        const items = (args.object as any).items;\n        const currentItem =\n            typeof items.getItem === 'function'\n                ? items.getItem(index)\n                : items[index];\n        let viewRef: EmbeddedViewRef<ItemContext>;\n\n        if (Trace.isEnabled()) {\n            CLog(CLogTypes.info, `onItemLoading: ${index} - Reusing existing view`);\n        }\n\n        viewRef = args.view[NG_VIEW];\n        // Getting angular view from original element (in cases when ProxyViewContainer\n        // is used NativeScript internally wraps it in a StackLayout)\n        if (\n            !viewRef &&\n            args.view instanceof LayoutBase &&\n            args.view.getChildrenCount() > 0\n        ) {\n            viewRef = args.view.getChildAt(0)[NG_VIEW];\n        }\n\n        if (!viewRef && Trace.isEnabled()) {\n            if (Trace.isEnabled()) {\n                CLog(CLogTypes.info, `ViewReference not found for item ${index}. View recycling is not working`);\n            }\n        }\n\n        if (!viewRef) {\n            if (Trace.isEnabled()) {\n                CLog(CLogTypes.info, `onItemLoading: ${index} - Creating view from template`);\n            }\n\n            viewRef = this.loader.createEmbeddedView(\n                this.itemTemplate,\n                new ItemContext(),\n                0\n            );\n            args.view = getItemViewRoot(viewRef);\n            args.view[NG_VIEW] = viewRef;\n        }\n\n        this.setupViewRef(viewRef, currentItem, index);\n\n        this.detectChangesOnChild(viewRef, index);\n    }\n\n    public setupViewRef(view: EmbeddedViewRef<ItemContext>, data: any, index: number): void {\n        const context = view.context;\n        context.$implicit = data;\n        context.item = data;\n        context.index = index;\n        context.even = index % 2 === 0;\n        context.odd = !context.even;\n\n        this.setupItemView.next({\n            context,\n            data,\n            index,\n            view,\n        });\n    }\n\n    protected getItemTemplateViewFactory(\n        template: TemplateRef<ItemContext>\n    ): () => View {\n        return () => {\n            const viewRef = this.loader.createEmbeddedView(\n                template,\n                new ItemContext(),\n                0\n            );\n            const resultView = getItemViewRoot(viewRef);\n            resultView[NG_VIEW] = viewRef;\n\n            return resultView;\n        };\n    }\n\n    private setItemTemplates() {\n        // The itemTemplateQuery may be changed after list items are added that contain <template> inside,\n        // so cache and use only the original template to avoid errors.\n        this.itemTemplate = this.itemTemplateQuery;\n\n        if (this._templateMap) {\n            if (Trace.isEnabled()) {\n                CLog(CLogTypes.info, 'Setting templates');\n            }\n\n            const templates: KeyedTemplate[] = [];\n            this._templateMap.forEach((value) => {\n                templates.push(value);\n            });\n            this._collectionView.itemTemplates = templates;\n        } else {\n            // If the map was not initialized this means that there are no named templates, so we register the default one.\n            this._collectionView.itemTemplate = this.getItemTemplateViewFactory(this.itemTemplate);\n        }\n    }\n\n    private detectChangesOnChild(viewRef: EmbeddedViewRef<ItemContext>, index: number) {\n        if (Trace.isEnabled()) {\n            CLog(CLogTypes.info, 'Manually detect changes in child: ' + index);\n        }\n        viewRef.markForCheck();\n        viewRef.detectChanges();\n    }\n\n    private refresh() {\n        if (this._collectionView) {\n            this._collectionView.refresh();\n        }\n    }\n}\n\nexport interface ComponentView {\n    rootNodes: any[];\n    destroy(): void;\n}\n\nexport type RootLocator = (nodes: any[], nestLevel: number) => View;\n\nexport function getItemViewRoot(viewRef: ComponentView, rootLocator: RootLocator = getSingleViewRecursive): View {\n    const rootView = rootLocator(viewRef.rootNodes, 0);\n    return rootView;\n}\n\n@Directive({ selector: '[cvTemplateKey]' })\nexport class TemplateKeyDirective {\n    constructor(private templateRef: TemplateRef<any>, @Host() private collectionView: CollectionViewComponent) {}\n\n    @Input()\n    set cvTemplateKey(value: any) {\n        if (Trace.isEnabled()) {\n            CLog(CLogTypes.info, 'cvTemplateKey: ' + value);\n        }\n        if (this.collectionView && this.templateRef) {\n            this.collectionView.registerTemplate(value.toLowerCase(), this.templateRef);\n        }\n    }\n}\n","// External\nimport { NO_ERRORS_SCHEMA, NgModule } from '@angular/core';\n\nimport { CollectionViewComponent, TemplateKeyDirective } from './collectionview-comp';\nexport { CollectionViewComponent, TemplateKeyDirective } from './collectionview-comp';\n\n@NgModule({\n    declarations: [CollectionViewComponent, TemplateKeyDirective],\n    exports: [CollectionViewComponent, TemplateKeyDirective],\n    schemas: [NO_ERRORS_SCHEMA],\n})\nexport class CollectionViewModule {}\n"],"names":["isListLikeIterable","i0.ÉµÉµelementStart","i0.ÉµÉµelement","i0.ÉµÉµelementEnd"],"mappings":"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"}