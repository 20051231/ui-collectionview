{"version":3,"sources":["../../../../src/collectionview/angular/collectionview-comp.ts","../../../../src/collectionview/angular/index.ts"],"names":["registerElement","CollectionView","NG_VIEW","ItemContext","$implicit","item","index","even","odd","this","CollectionViewComponent","_elementRef","_iterableDiffers","_this","setupItemView","EventEmitter","itemViewLoader","viewType","ListViewViewTypes","ItemView","_itemTemplate","loader","nativeItem","createEmbeddedView","typedView","getItemViewRoot","_collectionView","nativeElement","on","itemLoadingEvent","onItemLoading","Object","defineProperty","prototype","value","refresh","_items","needDiffer","ObservableArray","_differ","isListLikeIterable","find","create","_index","items","ngAfterContentInit","Trace","isEnabled","CLog","CLogTypes","info","setItemTemplates","ngOnDestroy","off","ngDoCheck","diff","registerTemplate","key","template","_templateMap","Map","keyedTemplate","createView","getItemTemplateViewFactory","set","args","view","itemTemplate","viewRef","object","currentItem","getItem","LayoutBase","getChildrenCount","getChildAt","setupViewRef","detectChangesOnChild","data","context","next","resultView","itemTemplateQuery","templates_1","forEach","push","itemTemplates","markForCheck","detectChanges","rootLocator","angular","getSingleViewRecursive","rootNodes","i0","ɵɵdirectiveInject","ElementRef","IterableDiffers","selectors","contentQueries","rf","ctx","dirIndex","TemplateRef","ViewContainerRef","i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵelementEnd","Component","selector","changeDetection","ChangeDetectionStrategy","OnPush","Inject","ViewChild","read","static","Output","ContentChild","Input","TemplateKeyDirective","templateRef","collectionView","toLowerCase","inputs","cvTemplateKey","Directive","decorators","Host","CollectionViewModule","declarations","exports","NgModule","schemas","NO_ERRORS_SCHEMA"],"mappings":"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","sourcesContent":["import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter,\n    Host,\n    Inject,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    OnDestroy,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ɵisListLikeIterable as isListLikeIterable,\n} from '@angular/core';\nimport { KeyedTemplate, LayoutBase, ObservableArray, Trace, View } from '@nativescript/core';\nimport { CLog, CLogTypes, CollectionView, CollectionViewItemEventData, ListViewViewTypes } from '@nativescript-community/ui-collectionview';\n\nimport { getSingleViewRecursive, isKnownView, registerElement } from '@nativescript/angular';\n\nregisterElement('CollectionView', () => CollectionView);\n\nconst NG_VIEW = '_ngViewRef';\n\nexport class ItemContext {\n    constructor(\n        public $implicit?: any,\n        public item?: any,\n        public index?: number,\n        public even?: boolean,\n        public odd?: boolean\n    ) {}\n}\n\nexport interface SetupItemViewArgs {\n    view: EmbeddedViewRef<any>;\n    data: any;\n    index: number;\n    context: ItemContext;\n}\n\n@Component({\n    selector: 'CollectionView',\n    template: `\n        <DetachedContainer>\n            <Placeholder #loader></Placeholder>\n        </DetachedContainer>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionViewComponent implements DoCheck, OnDestroy, AfterContentInit {\n    public get nativeElement(): any {\n        return this._collectionView;\n    }\n    public get listView(): any {\n        return this._collectionView;\n    }\n\n    @ViewChild('loader', { read: ViewContainerRef, static: true }) public loader: ViewContainerRef;\n    @Output() public setupItemView = new EventEmitter<SetupItemViewArgs>();\n    @ContentChild(TemplateRef, { read: TemplateRef, static: true }) public itemTemplateQuery: TemplateRef<ItemContext>;\n\n    @Input()\n    public get itemTemplate() {\n        return this._itemTemplate;\n    }\n    public set itemTemplate(value: any) {\n        this._itemTemplate = value;\n        this._collectionView.refresh();\n    }\n    @Input()\n    public get items() {\n        return this._items;\n    }\n    public set items(value: any) {\n        this._items = value;\n        let needDiffer = true;\n        if (value instanceof ObservableArray) {\n            needDiffer = false;\n        }\n        if (needDiffer && !this._differ && isListLikeIterable(value)) {\n            this._differ = this._iterableDiffers.find(this._items).create((_index, item) => item);\n        }\n\n        this._collectionView.items = this._items;\n    }\n\n    private _collectionView: CollectionView;\n    private _items: any;\n    private _differ: IterableDiffer<KeyedTemplate>;\n    private _itemTemplate: TemplateRef<ItemContext>;\n    private _templateMap: Map<string, KeyedTemplate>;\n\n    constructor(@Inject(ElementRef) _elementRef: ElementRef, @Inject(IterableDiffers) private _iterableDiffers: IterableDiffers) {\n        this._collectionView = _elementRef.nativeElement;\n\n        this._collectionView.on(CollectionView.itemLoadingEvent, this.onItemLoading, this);\n        this._collectionView.itemViewLoader = this.itemViewLoader;\n    }\n\n    private itemViewLoader = (viewType) => {\n        switch (viewType) {\n            case ListViewViewTypes.ItemView:\n                if (this._itemTemplate && this.loader) {\n                    const nativeItem = this.loader.createEmbeddedView(this._itemTemplate, new ItemContext(), 0);\n                    const typedView = getItemViewRoot(nativeItem);\n                    typedView[NG_VIEW] = nativeItem;\n                    return typedView;\n                }\n                break;\n        }\n        return null;\n    };\n\n    public ngAfterContentInit() {\n        if (Trace.isEnabled()) {\n            CLog(CLogTypes.info, 'CollectionView.ngAfterContentInit()');\n        }\n        this.setItemTemplates();\n    }\n\n    public ngOnDestroy() {\n        this._collectionView.off(CollectionView.itemLoadingEvent, this.onItemLoading, this);\n    }\n\n    public ngDoCheck() {\n        if (Trace.isEnabled()) {\n            CLog(CLogTypes.info, 'ngDoCheck() - execute differ? ' + this._differ);\n        }\n        if (this._differ) {\n            if (Trace.isEnabled()) {\n                CLog(CLogTypes.info, 'ngDoCheck() - execute differ');\n            }\n            const changes = this._differ.diff(this._items);\n            if (changes) {\n                if (Trace.isEnabled()) {\n                    CLog(CLogTypes.info, 'ngDoCheck() - refresh');\n                }\n                this.refresh();\n            }\n        }\n    }\n\n    public registerTemplate(key: string, template: TemplateRef<ItemContext>) {\n        if (Trace.isEnabled()) {\n            CLog(CLogTypes.info, 'registerTemplate for key: ' + key);\n        }\n        if (!this._templateMap) {\n            this._templateMap = new Map<string, KeyedTemplate>();\n        }\n\n        const keyedTemplate = {\n            key,\n            createView: this.getItemTemplateViewFactory(template),\n        };\n\n        this._templateMap.set(key, keyedTemplate);\n    }\n\n    // @HostListener('itemLoadingInternal', ['$event'])\n    public onItemLoading(args: CollectionViewItemEventData) {\n        if (!args.view && !this.itemTemplate) {\n            return;\n        }\n        if (!this.items) return;\n        const index = args.index;\n        const items = (args.object as any).items;\n        const currentItem =\n            typeof items.getItem === 'function'\n                ? items.getItem(index)\n                : items[index];\n        let viewRef: EmbeddedViewRef<ItemContext>;\n\n        if (Trace.isEnabled()) {\n            CLog(CLogTypes.info, `onItemLoading: ${index} - Reusing existing view`);\n        }\n\n        viewRef = args.view[NG_VIEW];\n        // Getting angular view from original element (in cases when ProxyViewContainer\n        // is used NativeScript internally wraps it in a StackLayout)\n        if (\n            !viewRef &&\n            args.view instanceof LayoutBase &&\n            args.view.getChildrenCount() > 0\n        ) {\n            viewRef = args.view.getChildAt(0)[NG_VIEW];\n        }\n\n        if (!viewRef && Trace.isEnabled()) {\n            if (Trace.isEnabled()) {\n                CLog(CLogTypes.info, `ViewReference not found for item ${index}. View recycling is not working`);\n            }\n        }\n\n        if (!viewRef) {\n            if (Trace.isEnabled()) {\n                CLog(CLogTypes.info, `onItemLoading: ${index} - Creating view from template`);\n            }\n\n            viewRef = this.loader.createEmbeddedView(\n                this.itemTemplate,\n                new ItemContext(),\n                0\n            );\n            args.view = getItemViewRoot(viewRef);\n            args.view[NG_VIEW] = viewRef;\n        }\n\n        this.setupViewRef(viewRef, currentItem, index);\n\n        this.detectChangesOnChild(viewRef, index);\n    }\n\n    public setupViewRef(view: EmbeddedViewRef<ItemContext>, data: any, index: number): void {\n        const context = view.context;\n        context.$implicit = data;\n        context.item = data;\n        context.index = index;\n        context.even = index % 2 === 0;\n        context.odd = !context.even;\n\n        this.setupItemView.next({\n            context,\n            data,\n            index,\n            view,\n        });\n    }\n\n    protected getItemTemplateViewFactory(\n        template: TemplateRef<ItemContext>\n    ): () => View {\n        return () => {\n            const viewRef = this.loader.createEmbeddedView(\n                template,\n                new ItemContext(),\n                0\n            );\n            const resultView = getItemViewRoot(viewRef);\n            resultView[NG_VIEW] = viewRef;\n\n            return resultView;\n        };\n    }\n\n    private setItemTemplates() {\n        // The itemTemplateQuery may be changed after list items are added that contain <template> inside,\n        // so cache and use only the original template to avoid errors.\n        this.itemTemplate = this.itemTemplateQuery;\n\n        if (this._templateMap) {\n            if (Trace.isEnabled()) {\n                CLog(CLogTypes.info, 'Setting templates');\n            }\n\n            const templates: KeyedTemplate[] = [];\n            this._templateMap.forEach((value) => {\n                templates.push(value);\n            });\n            this._collectionView.itemTemplates = templates;\n        } else {\n            // If the map was not initialized this means that there are no named templates, so we register the default one.\n            this._collectionView.itemTemplate = this.getItemTemplateViewFactory(this.itemTemplate);\n        }\n    }\n\n    private detectChangesOnChild(viewRef: EmbeddedViewRef<ItemContext>, index: number) {\n        if (Trace.isEnabled()) {\n            CLog(CLogTypes.info, 'Manually detect changes in child: ' + index);\n        }\n        viewRef.markForCheck();\n        viewRef.detectChanges();\n    }\n\n    private refresh() {\n        if (this._collectionView) {\n            this._collectionView.refresh();\n        }\n    }\n}\n\nexport interface ComponentView {\n    rootNodes: any[];\n    destroy(): void;\n}\n\nexport type RootLocator = (nodes: any[], nestLevel: number) => View;\n\nexport function getItemViewRoot(viewRef: ComponentView, rootLocator: RootLocator = getSingleViewRecursive): View {\n    const rootView = rootLocator(viewRef.rootNodes, 0);\n    return rootView;\n}\n\n@Directive({ selector: '[cvTemplateKey]' })\nexport class TemplateKeyDirective {\n    constructor(private templateRef: TemplateRef<any>, @Host() private collectionView: CollectionViewComponent) {}\n\n    @Input()\n    set cvTemplateKey(value: any) {\n        if (Trace.isEnabled()) {\n            CLog(CLogTypes.info, 'cvTemplateKey: ' + value);\n        }\n        if (this.collectionView && this.templateRef) {\n            this.collectionView.registerTemplate(value.toLowerCase(), this.templateRef);\n        }\n    }\n}\n","// External\nimport { NO_ERRORS_SCHEMA, NgModule } from '@angular/core';\n\nimport { CollectionViewComponent, TemplateKeyDirective } from './collectionview-comp';\nexport { CollectionViewComponent, TemplateKeyDirective } from './collectionview-comp';\n\n@NgModule({\n    declarations: [CollectionViewComponent, TemplateKeyDirective],\n    exports: [CollectionViewComponent, TemplateKeyDirective],\n    schemas: [NO_ERRORS_SCHEMA],\n})\nexport class CollectionViewModule {}\n"]}